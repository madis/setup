set nocompatible
filetype plugin indent on

syntax enable " Enable syntax highlighting
let mapleader = ","

" Show trailing Whitespace
set listchars=tab:>\ ,trail:â€¢,extends:>,precedes:<,nbsp:+
set list
set nowrap

" Always use 2 spaces instead of tabs
set expandtab
set tabstop=2
set shiftwidth=2

set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab
set ignorecase
set smartcase
set number
set nrformats-=octal

set ttimeout
set ttimeoutlen=100

" Show filename as terminal title
set title
set titlestring=%t

set incsearch

" Use F3 to clear search highlighting
nnoremap <F3> :set hlsearch!<CR>

" Use F2 to remove search highlighting
nnoremap <F2> :noh<return>

" Map fzf to autocomplete opening files
" let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <leader>o :Files<cr>

" More natural open split location
set splitbelow
set splitright

set ruler
set wildmenu
set laststatus=2
set cursorline

set nofoldenable    " disable folding (for markdown)

set ttimeoutlen=10 " Reduce delay after pressinng Esc

" Show thin cursor in iterm. For neovim export
au VimLeave * set guicursor=a:block-blinkon0
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:ver20,o:ver50,a:blinkwait700-blinkoff400-blinkon250,sm:block-blinkwait175-blinkoff150-blinkon175
" " Changing cursor shape per mode
" " 1 or 0 -> blinking block
" " 2 -> solid block
" " 3 -> blinking underscore
" " 4 -> solid underscore
if exists('$TMUX')
    " tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
    let &t_SI .= "\<Esc>Ptmux;\<Esc>\<Esc>[4 q\<Esc>\\"
    let &t_EI .= "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
    autocmd VimLeave * silent !echo -ne "\033Ptmux;\033\033[0 q\033\\"
else
    let &t_SI .= "\<Esc>[4 q"
    let &t_EI .= "\<Esc>[2 q"
    autocmd VimLeave * silent !echo -ne "\033[0 q"
endif
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

augroup ft_rb
  autocmd!
  " fix the SLOOOW syntax highlighting
  autocmd FileType ruby setlocal re=1 foldmethod=manual
augroup END

augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml,html.handlebars setlocal ai sw=2 sts=2 et
  autocmd FileType ruby,eruby,yaml setlocal path+=lib
  " Make ?s part of words
  autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?
  autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

  " Automatically remove trailing whitespace
  autocmd BufWritePre * StripWhitespace

  " Clojure
  autocmd FileType clojure setlocal colorcolumn=80

  " Procfile
  autocmd BufNewFile,BufReadPost Procfile set filetype=ruby
augroup END

augroup vimrc     " Source vim configuration upon save
  autocmd!
  autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
  autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
augroup END

augroup WrapLineInTeXFile
    autocmd!
    autocmd FileType markdown setlocal wrap
augroup END

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
endif

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif

if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

set autoread

set history=1000
set tabpagemax=50

if !empty(&viminfo)
  set viminfo^=!
endif
set sessionoptions-=options

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
  set t_Co=16
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>

" Load Powerline fonts for airline
let g:airline_powerline_fonts = 1
set t_Co=256
set guifont=Inconsolata\ for\ Powerline:h15
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8

" More readable highlighting
highlight Search ctermfg=black ctermbg=yellow

" vim:set ft=vim et sw=2:
call plug#begin()

" LISP / Clojure plugins
Plug 'tpope/vim-fireplace' " Clojure development dynamic
Plug 'guns/vim-clojure-static' " Clojure development static
Plug 'kien/rainbow_parentheses.vim'
Plug 'vim-scripts/paredit.vim'

" Ruby related
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'nelstrom/vim-textobj-rubyblock'

" General workflow
Plug 'altercation/vim-colors-solarized'
Plug 'godlygeek/tabular'
Plug 'christoomey/vim-tmux-navigator'
Plug 'slim-template/vim-slim'
Plug 'christoomey/vim-tmux-runner'
Plug 'mileszs/ack.vim'
Plug 'vimtaku/hl_matchit.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'bkad/CamelCaseMotion'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'vim-airline/vim-airline'
Plug 'ajh17/VimCompletesMe'
Plug 'tpope/vim-endwise'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'docunext/closetag.vim'
Plug 'kana/vim-textobj-user'
Plug 'godlygeek/tabular'
Plug 'janko-m/vim-test'
Plug 'Chiel92/vim-autoformat'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-obsession'
Plug 'kshenoy/vim-signature'
Plug 'junegunn/vim-easy-align'

" Syntax / languages
Plug 'sheerun/vim-polyglot'
Plug 'jparise/vim-graphql'
Plug 'tpope/vim-markdown'
Plug 'mustache/vim-mustache-handlebars'
Plug 'exu/pgsql.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'rlue/vim-fold-rspec'

call plug#end()

let g:sql_type_default = 'pgsql'

let g:rainbow_active = 1

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['white',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 15 " Maximum rainbow parentheses colors (default 16, removed black)

let test#strategy = "vtr"

" vim-test mappings
map <Leader>t :TestFile<CR>
map <Leader>s :TestNearest<CR>
map <Leader>l :TestLast<CR>
map <Leader>a :TestSuite<CR>

"Highlight Ruby matching do/end def/end blocks
let g:hl_matchit_enable_on_vim_startup = 1

" Make CtrlP use ag for listing the files. Way faster and no useless files.
" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ackprg = 'ag --vimgrep'
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let g:ctrlp_dotfiles = 1
endif

" bind \ (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" Map backslash for searching with Ag
nnoremap \ :Ack<SPACE>

vnoremap <F4> :VtrSendLinesToRunner<CR>
nnoremap <leader>sl :VtrSendLinesToRunner<cr>
vnoremap <leader>sl :VtrSendLinesToRunner<cr>

" Use camel case motion
call camelcasemotion#CreateMotionMappings('<leader>')

" Support syntactic whitespace (e.g. sending to Python)
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()
let g:fzf_history_dir = '~/.local/share/fzf-history'

" Markdown highlighting for fenced codeblocks
" https://coderwall.com/p/ftqcla/markdown-with-fenced-code-blocks-in-vim
" au BufNewFile,BufRead *.md  setf markdown
" autocmd BufRead,BufNew *.md set filetype=markdown
" autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'clojure']

highlight clear CursorLine
highlight CursorLine gui=underline cterm=underline

set nocompatible
filetype plugin indent on

syntax enable " Enable syntax highlighting
let mapleader = ","
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" Show trailing Whitespace
set listchars=tab:>\ ,trail:â€¢,extends:>,precedes:<,nbsp:+
set list
set nowrap

" Always use 2 spaces instead of tabs
set expandtab
set tabstop=2
set shiftwidth=2

set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab
set ignorecase
set smartcase
set number
set nrformats-=octal

set ttimeout
set ttimeoutlen=100

" Show filename as terminal title
set title
set titlestring=%t

set incsearch

" Use F3 to clear search highlighting
nnoremap <F3> :set hlsearch!<CR>

" Use F2 to remove search highlighting
nnoremap <F2> :noh<return>

" Map fzf to autocomplete opening files
nnoremap <leader>o :Files<cr>

" Shortcut to open current file in new tab
nnoremap <leader>tt :tabnew %<cr>
au TabLeave * let g:lasttab = tabpagenr()
" Return to last tab - tr - tab return
nnoremap <silent> <leader>tr :exe "tabn ".g:lasttab<cr>
vnoremap <silent> <leader>tr :exe "tabn ".g:lasttab<cr>

" Go to tab by number
noremap <M-1> 1gt
noremap <M-2> 2gt
noremap <M-3> 3gt
noremap <M-4> 4gt
noremap <M-5> 5gt
noremap <M-6> 6gt

" Take cursor to the last window from anywhere - normally TagBar
"   - https://vim.fandom.com/wiki/Going_to_the_nth-from-last_window
noremap <leader>ta :exe winnr('$') 'wincmd w'<cr>

" More natural open split location
set splitbelow
set splitright

set ruler
set wildmenu
set laststatus=2
set cursorline

set ttimeoutlen=10 " Reduce delay after pressinng Esc

" Show thin cursor in iterm. For neovim export
au VimLeave * set guicursor=a:block-blinkon0
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:ver20,o:ver50,a:blinkwait700-blinkoff400-blinkon250,sm:block-blinkwait175-blinkoff150-blinkon175
" " Changing cursor shape per mode
" " 1 or 0 -> blinking block
" " 2 -> solid block
" " 3 -> blinking underscore
" " 4 -> solid underscore
if exists('$TMUX')
    " tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
    let &t_SI .= "\<Esc>Ptmux;\<Esc>\<Esc>[4 q\<Esc>\\"
    let &t_EI .= "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
    autocmd VimLeave * silent !echo -ne "\033Ptmux;\033\033[0 q\033\\"
else
    let &t_SI .= "\<Esc>[4 q"
    let &t_EI .= "\<Esc>[2 q"
    autocmd VimLeave * silent !echo -ne "\033[0 q"
endif
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml,html.handlebars setlocal ai sw=2 sts=2 et
  autocmd FileType ruby,eruby,yaml setlocal path+=lib
  " Make ?s part of words
  autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?
  autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

  " Automatically remove trailing whitespace
  autocmd BufWritePre * StripWhitespace

  " Clojure
  autocmd Filetype clojure setlocal foldmethod=syntax
  autocmd Filetype clojure setlocal foldlevelstart=99

  " Procfile
  autocmd BufNewFile,BufReadPost Procfile set filetype=ruby

  " Zinc
  autocmd BufNewFile,BufRead *.zn set filetype=rust
  autocmd FileType markdown set wrap
augroup END

" Toggle folds (open/close) with <SPACE>
nnoremap <silent> <Space> @=(foldlevel('.')?'zA':"\<Space>")<CR>

" START: Detect file type based on context
if did_filetype()
    finish
endif
if getline(1) =~# '^#!.*/bin/env\s\+node\>'
    setfiletype javascript
endif
if getline(1) =~# '^#!.*/bin/env\s\+ruby\>'
    setfiletype ruby
endif
" FINISH: Detect file type based on context

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
endif

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif

if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

set autoread

set history=1000
set tabpagemax=50

if !empty(&viminfo)
  set viminfo^=!
endif
set sessionoptions-=options

inoremap <C-U> <C-G>u<C-U>

" Load Powerline fonts for airline
let g:airline_powerline_fonts = 1
set t_Co=256
set guifont=Inconsolata\ for\ Powerline:h15
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8

" vim:set ft=vim et sw=2:
call plug#begin()

" LISP / Clojure plugins
" Plug 'tpope/vim-fireplace' " Clojure development dynamic
Plug 'guns/vim-clojure-static' " Clojure development static
Plug 'luochen1990/rainbow'
Plug 'guns/vim-sexp'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'liquidz/vim-iced', {'for': 'clojure'}

" Ruby related
" Plug 'vim-ruby/vim-ruby'
" Plug 'tpope/vim-rails'
" Plug 'nelstrom/vim-textobj-rubyblock'

" General workflow
Plug 'frankier/neovim-colors-solarized-truecolor-only'
Plug 'tpope/vim-unimpaired'
Plug 'preservim/tagbar'

Plug 'godlygeek/tabular'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'mileszs/ack.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'bkad/CamelCaseMotion'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'vim-airline/vim-airline'
Plug 'ackyshake/VimCompletesMe'
Plug 'tpope/vim-endwise'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'docunext/closetag.vim'
Plug 'kana/vim-textobj-user'
Plug 'godlygeek/tabular'
" Plug 'janko-m/vim-test'
Plug 'Chiel92/vim-autoformat'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-obsession'
Plug 'kshenoy/vim-signature'
Plug 'junegunn/vim-easy-align'
Plug 'https://github.com/adelarsq/vim-matchit'
Plug 'triglav/vim-visual-increment'

" Syntax / languages
Plug 'sheerun/vim-polyglot'
Plug 'jparise/vim-graphql'
Plug 'tpope/vim-markdown'
" Plug 'mustache/vim-mustache-handlebars'
Plug 'exu/pgsql.vim'
Plug 'jiangmiao/auto-pairs'
" Plug 'rlue/vim-fold-rspec'
" Plug 'neomake/neomake'
Plug 'rakr/vim-one'

call plug#end()

" Use ag instead of ack
" let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ackprg = 'rg --vimgrep --type-not sql --smart-case'
" Auto close the Quickfix list after pressing '<enter>' on a list item
let g:ack_autoclose = 0

" Any empty ack search will search for the work the cursor is on
let g:ack_use_cword_for_empty_search = 1

" Don't jump to first match
cnoreabbrev Ack Ack!

" Cljfold config
let g:clojure_foldwords = "ns,def,defn,defn-,defmacro,defmethod,defschema,defprotocol,defrecord,deftest"
let g:clojure_syntax_keywords = {
    \ 'clojureMacro': ["deftest"],
    \ 'clojureFunc': ["string/join", "string/replace"]
    \ }

set nrformats=alpha,hex
" Add linuxbrew fzf to run time path
set rtp+=/home/linuxbrew/.linuxbrew/opt/fzf

colorscheme one
set background=dark " for the dark version
" Colorscheme BEGIN
let g:sql_type_default = 'pgsql'

let g:rainbow_active = 1

let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['white',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 15 " Maximum rainbow parentheses colors (default 16, removed black)

let test#strategy = "vtr"

" vim-test mappings
map <Leader>t :TestFile<CR>
map <Leader>s :TestNearest<CR>
map <Leader>l :TestLast<CR>
map <Leader>a :TestSuite<CR>

"Highlight Ruby matching do/end def/end blocks
let g:hl_matchit_enable_on_vim_startup = 1

" bind \ (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" Map backslash for searching with Ag
nnoremap <leader>f :Ack<SPACE>

vnoremap <F4> :VtrSendLinesToRunner<CR>
nnoremap <leader>sl :VtrSendLinesToRunner<cr>
vnoremap <leader>sl :VtrSendLinesToRunner<cr>

" Use camel case motion
call camelcasemotion#CreateMotionMappings('<leader>')

" Support syntactic whitespace (e.g. sending to Python)
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1

let g:fzf_history_dir = '~/.local/share/fzf-history'

let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'clojure']

highlight clear CursorLine
" highlight CursorLine gui=underline cterm=underline
highlight Folded ctermbg=black
highlight Visual ctermbg=gray ctermfg=black
" More readable highlighting
highlight Search ctermfg=black ctermbg=yellow


" Tagbar config for Solidity
let g:tagbar_type_solidity = {
    \ 'ctagstype': 'solidity',
    \ 'kinds' : [
        \ 'c:contracts',
        \ 'e:events',
        \ 'f:functions',
        \ 'm:mappings',
        \ 'v:varialbes',
    \ ]
\ }
